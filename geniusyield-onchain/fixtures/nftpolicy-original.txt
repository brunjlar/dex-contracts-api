let* x = fstPair# ! !
     x_0 = sndPair# ! !
     x_1 = \ x_2 -> x_0 (unConstrData# x_2)
     x_3 = headList# !
     x_4 = tailList# !
     x_5 = ifThenElse# !
     x_6 = \ x_7 -> let* x_8 = unConstrData# (x_3 (x_4 (x_1 x_7))); x_9 = x x_8; x_a = x_0 x_8 in x_5 (equalsInteger# 0# x_9) (\ ~ -> unBData# (x_3 x_a)) (\ ~ -> ERROR) !
     x_b = \ x_c -> x_4 (x_4 x_c)
     x_d = \ x_e -> x_4 (x_b x_e)
     x_f = \ x_g -> x_4 (x_d x_g)
     x_h = \ x_i -> let* x_j = unMapData# (x_0 x_i) in \ x_k x_m -> x_k x_j
     x_n = chooseList# ! !
     x_p = \ x_r -> let* x_s = \ x_t -> x_r (\ x_u -> x_t x_t x_u) in x_r (\ x_v -> x_s x_s x_v)
     x_w = \ x_x x_y x_z -> x_p (\ x_10 x_11 -> x_n x_11 (\ ~ x_12 x_13 -> x_13 !) (\ ~ -> x_5 (equalsData# (x (x_3 x_11)) x_y) (\ ~ -> x_x (x_3 x_11)) (\ ~ -> x_10 (x_4 x_11)) !) !) x_z
     x_14 = \ x_15 -> x_w x_h (bData# x_15)
     x_16 = \ ~ -> False#
     x_17 = \ x_18 x_19 -> x_5 x_18 x_19 x_16
     x_1a = \ ~ -> True#
     x_1b = \ x_1c -> x_5 x_1c x_1a
     x_1d = \ x_1e -> x_p (\ x_1f x_1g -> x_n x_1g (\ ~ -> False#) (\ ~ -> x_1b (x_1e (x_3 x_1g)) (\ ~ -> x_1f (x_4 x_1g)) !) !)
in \ x_1h x_1i ->
     let* x_1j = unConstrData# x_1h
          x_1k = x x_1j
          x_1m = x_0 x_1j
     in x_5
          (equalsInteger# 1# x_1k)
          (\ ~ -> let* x_1n = x_6 x_1i; x_1p = x_3 (x_1 x_1i) in x_5 (x_1d (\ x_1r -> lessThanEqualsInteger# 0# (unIData# (x_0 x_1r))) (x_14 x_1n (unMapData# (x_3 (x_f (x_1 x_1p)))) (\ x_1s -> x_1s) (\ ~ -> ERROR))) (\ ~ -> ERROR) (\ ~ -> ()#) !)
          (\ ~ ->
             let* x_1t = x_3 (x_1 x_1i)
                  x_1u = x_3 x_1m
                  x_1v = x_1 x_1u
                  x_1w = sha2_256# (consByteString# (unIData# (x_3 (x_4 x_1v))) (let* x_1x = x_3 x_1v in unBData# (x_3 (x_1 x_1x))))
                  x_1y = x_6 x_1i
                  x_1z = x_14 x_1y (unMapData# (x_3 (x_f (x_1 x_1t)))) (\ x_20 -> x_20) (\ ~ -> ERROR)
             in x_n
                  x_1z
                  (\ ~ -> ERROR)
                  (\ ~ ->
                     x_5
                       (x_17
                          (let* x_21 = unListData# (x_3 (x_1 x_1t))
                           in x_1d (\ x_22 -> let* x_23 = x_3 (x_1 x_22) in equalsData# (listData# (x_1 x_1u)) (listData# (x_1 x_23))) x_21)
                          (\ ~ -> x_17 (nullList# ! (x_4 x_1z)) (\ ~ -> x_17 (equalsInteger# (unIData# (x_0 (x_3 x_1z))) 1#) (\ ~ -> equalsByteString# (unBData# (x (x_3 x_1z))) x_1w) !) !)
                          !)
                       (\ ~ -> ()#)
                       (\ ~ -> ERROR)
                       !)
                  !)
          !
